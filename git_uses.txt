###########################################
# For Update Local Repo
git pull

# 
cd directorio-del-repositorio-local/
git status
git fetch
git merge origin/main
git status
git push

# To add the local repo to remote repo
git remote add origin <URL>
git add .
git commit -m"confirmation"
git push --set-upstream origin master

###########################################
#You can define credentials for a specific repository instead of globally using the git credential command along with the store option and the --file option.
#Here are the steps to do it:
#Open the terminal and navigate to the repository in question.
#Run the following command to define the credential storage file for that repository:

git config credential.helper 'store --file ~/.git-credentials-repo'

#This command will set the credential storage file to ~/.git-credentials-repo.
#Next, run the following command to save the repository's credentials to the storage file:

git credential approve

#When you run this command, Git will prompt you for your Github credentials. After you enter them, Git will store them in the file you just defined.
#Finally, verify that your credentials are stored correctly in the file by running the following command:

cat ~/.git-credentials-repo

#This command will display the credentials stored in the credential storage file.
#Now, when you perform operations on the repository, Git will use the credentials stored in the credential storage file to authenticate your operations.
###########################################

# Verifying email and credentials in Git
# To view the email configured in Git in your local repository, 
# use the following command:
$ git config user.email

# This will display the email you have configured for Git.

# To verify the credentials configured in Git in your local 
# repository, use the following command:
$ git config credential.helper

# This will display the type of credential helper you have 
# configured. Depending on the helper you use, you can view the 
# credentials using different commands.

# For example, if you use Git's credential caching helper, you can 
# view the cached credentials using the following command:
$ git credential-cache get

# This will display the cached credentials, including the username 
# and access token.

# If you do not remember the credentials you have configured, you can 
# reset them by following these steps:

# 1. Change the email configured in Git:
$ git config --global user.email "your_email@example.com"

# This command changes the email configured in Git to 
# your_email@example.com.

# 2. Remove the cached credentials:
$ git credential-cache erase

# This command removes the cached credentials on your system.

# After resetting the credentials, you will need to log in again to 
# the remote repository the next time you perform an operation that 
# requires authentication.
